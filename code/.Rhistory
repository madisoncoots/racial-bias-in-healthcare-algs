breaks =group_names)
scarcity_pct_changed_plot <- diabetes_scarcity_pct_changed_plot_data %>%
ggplot(aes(x = capacity / 100, y = pct_changed_decision, color = race)) +
geom_hline(yintercept=0) +
geom_line() +
ylab("Fraction of individuals\nwith changed decisions") +
xlab("Screening capacity") +
scale_x_continuous(labels = scales::percent) +
theme(legend.title = element_blank(),
legend.position =  "none") +
scale_color_manual(values=group_color_map,
breaks =group_names)
scarcity_plot <-
scarcity_utility_plot +
scarcity_pct_changed_plot +
plot_layout(ncol = 1, nrow = 2)
ggsave(paste(figure_save_path, "scarcity_plot.png", sep = ""),
width = 7,
height = 7)
ggsave(paste(figure_save_path, "scarcity_plot.png", sep = ""),
width = 5,
height = 7)
ggsave(paste(figure_save_path, "scarcity_plot.png", sep = ""),
width = 6,
height = 7)
ggsave(paste(figure_save_path, "scarcity_plot.png", sep = ""),
width = 5.5,
height = 7)
calibration_scatter_plot <-
diabetes_race_blind_calib +
diabetes_race_blind_scatter +
plot_layout(ncol = 1, nrow = 2)
calibration_scatter_plot
ggsave(paste(figure_save_path, "calibration_scatter_plot.png", sep = ""),
width = 5.5,
height = 7)
ggsave(paste(figure_save_path, "calibration_scatter_plot.png", sep = ""),
width = 3.5,
height = 7)
ggsave(paste(figure_save_path, "calibration_scatter_plot.png", sep = ""),
width = 4,
height = 7)
ggsave(paste(figure_save_path, "calibration_scatter_plot.png", sep = ""),
width = 3.75,
height = 7)
ggsave(paste(figure_save_path, "scarcity_plot.png", sep = ""),
width = 5.25,
height = 7)
scarcity_plot <-
scarcity_utility_plot +
scarcity_pct_changed_plot +
plot_layout(ncol = 1, nrow = 2)
ggsave(paste(figure_save_path, "scarcity_plot.png", sep = ""),
width = 5.25,
height = 7)
ggsave(paste(figure_save_path, "scarcity_plot.png", sep = ""),
width = 5.5,
height = 7)
ggsave(paste(figure_save_path, "scarcity_plot.png", sep = ""),
width = 5.3,
height = 7)
ggsave(paste(figure_save_path, "scarcity_plot.png", sep = ""),
width = 5.4,
height = 7)
dot_plots <- utility_dot_plot + dot_plot +
plot_layout(ncol = 2, nrow = 1)
dot_plots
ggsave(paste(figure_save_path, "dot_plots.png", sep = ""),
width = 5.4,
height = 3)
ggsave(paste(figure_save_path, "dot_plots.png", sep = ""),
width = 2,
height = 2)
ggsave(paste(figure_save_path, "dot_plots.png", sep = ""),
width = 7,
height = 2)
ggsave(paste(figure_save_path, "dot_plots.png", sep = ""),
width = 4,
height = 2)
ggsave(paste(figure_save_path, "dot_plots.png", sep = ""),
width = 3,
height = 2)
ggsave(paste(figure_save_path, "dot_plots.png", sep = ""),
width = 3,
height = 1)
ggsave(paste(figure_save_path, "dot_plots.png", sep = ""),
width = 5,
height = 2)
ggsave(paste(figure_save_path, "dot_plots.png", sep = ""),
width = 5,
height = 3)
ggsave(paste(figure_save_path, "dot_plots.png", sep = ""),
width = 5,
height = 2)
ggsave(paste(figure_save_path, "dot_plots.png", sep = ""),
width = 7,
height = 2)
ggsave(paste(figure_save_path, "dot_plots.png", sep = ""),
width = 70,
height = 2)
ggsave(paste(figure_save_path, "dot_plots.png", sep = ""),
width = 10,
height = 2)
ggsave(paste(figure_save_path, "dot_plots.png", sep = ""),
width = 8,
height = 2)
ggsave(paste(figure_save_path, "dot_plots.png", sep = ""),
width = 8,
height = 3)
ggsave(paste(figure_save_path, "dot_plots.png", sep = ""),
width = 8,
height = 2.5)
dot_plot <- diabetes_dot_plot_data %>%
ggplot(aes(x=pct_changed_decision, y=race, color=race, fill = race)) +
geom_point(size=4) +
geom_bar(stat="identity", width = 0.03, show.legend = FALSE) +
geom_vline(data = diabetes_dot_plot_data, aes(xintercept = pop_average),
show.legend = FALSE) +
theme(legend.title = element_blank(),
legend.position = "none",
strip.background = element_blank(),
strip.text.x = element_blank()) +
xlab("Fraction of individuals with\nchanged decisions") +
ylab("") +
scale_color_manual(values=group_color_map,
breaks =group_names) +
scale_fill_manual(values=group_color_map,
breaks =group_names) +
scale_x_continuous(labels = scales::percent,
breaks = seq(0, 1, 0.25),
minor_breaks = c()) +
scale_y_discrete(labels = NULL,
breaks = NULL) +
coord_cartesian(xlim = c(0, 1))
utility_dot_plot <- diabetes_utility_dot_plot_data %>%
ggplot(aes(x=average_utility_diff, y=race, color=race, fill = race)) +
geom_point(size=4) +
geom_bar(stat="identity", width = 0.03, show.legend = FALSE) +
geom_vline(data = diabetes_utility_dot_plot_data, aes(xintercept = pop_average),
show.legend = FALSE) +
theme(legend.title = element_blank(),
legend.position = "none") +
xlab("Utility gain per 10,000 individuals") +
ylab("Group") +
scale_color_manual(values=group_color_map,
breaks =group_names) +
scale_fill_manual(values=group_color_map,
breaks =group_names) +
scale_y_discrete(labels = NULL,
breaks = NULL) +
coord_cartesian(xlim=c(0,30.1))
dot_plots <- utility_dot_plot + dot_plot +
plot_layout(ncol = 2, nrow = 1)
ggsave(paste(figure_save_path, "dot_plots.png", sep = ""),
width = 8,
height = 2.5)
# Author: Madison Coots
# Date: November 2, 2023
# ======================
# Code for all lung cancer figures, tables, and statistics.
# Coots et al. (2023)
library(tidyverse)
library(readr)
library(here)
library(rstudioapi)
working_directory <- getwd()
if (basename(working_directory) == "code") {
# being called from master script
directory_path <- here(working_directory, 'lc/')
} else {
# being run on its own
directory_path <- dirname(getActiveDocumentContext()$path)
}
source(here(directory_path, "/colors.R")) # For figure color maps
# Author: Madison Coots
# Date: November 2, 2023
# ======================
# Code for all lung cancer figures, tables, and statistics.
# Coots et al. (2023)
library(tidyverse)
library(readr)
library(here)
library(rstudioapi)
working_directory <- getwd()
if (basename(working_directory) == "code") {
# being called from master script
directory_path <- here(working_directory, 'lc/')
} else {
# being run on its own
directory_path <- dirname(getActiveDocumentContext()$path)
}
source(here(directory_path, "/colors.R")) # For figure color maps
working_directory <- getwd()
if (basename(working_directory) == "code") {
# being called from master script
directory_path <- here(working_directory, 'lc/')
} else {
# being run on its own
directory_path <- dirname(getActiveDocumentContext()$path)
}
source(here(directory_path, "/colors.R")) # For figure color maps
if (basename(working_directory) == "code") {
# being called from master script
directory_path <- here(working_directory, 'lc/')
} else {
# being run on its own
directory_path <- dirname(getActiveDocumentContext()$path)
}
source(here(directory_path, "/colors.R")) # For figure color maps
working_directory <- getwd()
working_directory
directory_path
here(directory_path, "/colors.R")
source(here(directory_path, "colors.R")) # For figure color maps
directory_path
directory_path
dirname(getActiveDocumentContext()$path)
# being run on its own
directory_path <- dirname(getActiveDocumentContext()$path)
directory_path
directory_path
here(directory_path, "colors.R"
)
# Author: Madison Coots
# Date: November 2, 2023
# ======================
# Code for all lung cancer figures, tables, and statistics.
# Coots et al. (2023)
library(tidyverse)
library(readr)
library(here)
library(rstudioapi)
working_directory <- getwd()
if (basename(working_directory) == "code") {
# being called from master script
directory_path <- here(working_directory, 'lc/')
} else {
# being run on its own
directory_path <- dirname(getActiveDocumentContext()$path)
}
source(here(directory_path, "colors.R")) # For figure color maps
working_directory <- getwd()
if (basename(working_directory) == "code") {
# being called from master script
directory_path <- here(working_directory, 'lc/')
} else {
# being run on its own
directory_path <- dirname(getActiveDocumentContext()$path)
}
directory_path
# Author: Madison Coots
# Date: November 2, 2023
# ======================
# Code for all lung cancer figures, tables, and statistics.
# Coots et al. (2023)
library(tidyverse)
library(readr)
library(here)
library(rstudioapi)
working_directory <- getwd()
if (basename(working_directory) == "code") {
# being called from master script
directory_path <- here(working_directory, 'lc')
} else {
# being run on its own
directory_path <- dirname(getActiveDocumentContext()$path)
}
source(here(directory_path, "colors.R")) # For figure color maps
# Author: Madison Coots
# Date: November 2, 2023
# ======================
# Code for all lung cancer figures, tables, and statistics.
# Coots et al. (2023)
library(tidyverse)
library(readr)
library(here)
library(rstudioapi)
working_directory <- getwd()
if (basename(working_directory) == "code") {
# being called from master script
directory_path <- here(working_directory, 'lc')
} else {
# being run on its own
directory_path <- dirname(getActiveDocumentContext()$path)
}
source(here(directory_path, "colors.R")) # For figure color maps
library(tidyverse)
# Set seed for reproducibility
set.seed(123)
library(tidyverse)
# Set seed for reproducibility
set.seed(123)
# Simulate right-skewed group using Beta distribution
n <- 1000  # Number of samples in each group
alpha_a <- 2
beta_a <- 5
group_a <- rbeta(n, alpha_a, beta_a)
# Simulate left-skewed group using Beta distribution
alpha_b <- 5
beta_b <- 2
group_b <- rbeta(n, alpha_b, beta_b)
# Combine the two groups into a data frame
risk_scores <- data.frame(
score = c(group_a, group_b),
group = rep(c("A", "B"), each = n)
)
ggplot(risk_scores, aes(x = score, fill = group)) +
geom_density(alpha = 0.6) +
labs(title = "Density plot of Right-Skewed and Left-Skewed Risk Scores",
x = "Risk Score", y = "Density") +
theme_minimal()
ggplot(risk_scores, aes(x = score, fill = group)) +
geom_density(alpha = 0.6) +
theme_bw()
ggplot(risk_scores, aes(x = score, color = group)) +
geom_density(alpha = 0.6) +
theme_bw()
# Combine the two groups into a data frame
risk_scores <- data.frame(
score = c(group_a, group_b),
group = rep(c("A", "B"), each = n)
)
ggplot(risk_scores, aes(x = score, color = group)) +
geom_density(alpha = 0.6) +
theme_bw() +
xlab("Default probability") +
ylab("")
ggplot(risk_scores, aes(x = score, color = group)) +
geom_density(alpha = 0.6) +
theme_bw() +
xlab("Default probability") +
ylab("") +
scale_color_manual(values = c("A" = "blue", "B" = "red"))
ggplot(risk_scores, aes(x = score, color = group)) +
geom_density(alpha = 0.6) +
theme_bw() +
xlab("Default probability") +
ylab("") +
scale_color_manual(values = c("A" = "blue", "B" = "red")) +
guides(fill = guide_legend(title = NULL), color = guide_legend(title = NULL))
ggplot(risk_scores, aes(x = score, color = group)) +
geom_density() +
theme_bw() +
xlab("Default probability") +
ylab("") +
scale_color_manual(values = c("A" = "blue", "B" = "red")) +
guides(fill = guide_legend(title = NULL), color = guide_legend(title = NULL))
ggplot(risk_scores, aes(x = score, color = group)) +
geom_density() +
theme_bw() +
xlab("Default probability") +
ylab("") +
scale_color_manual(values = c("A" = "blue", "B" = "red")) +
guides(fill = guide_legend(title = NULL), color = guide_legend(title = NULL))
library(tidyverse)
# Set seed for reproducibility
set.seed(123)
# Simulate right-skewed group using Beta distribution
n <- 10000  # Number of samples in each group
alpha_a <- 2
beta_a <- 5
group_a <- rbeta(n, alpha_a, beta_a)
# Simulate left-skewed group using Beta distribution
alpha_b <- 5
beta_b <- 2
group_b <- rbeta(n, alpha_b, beta_b)
# Combine the two groups into a data frame
risk_scores <- data.frame(
score = c(group_a, group_b),
group = rep(c("A", "B"), each = n)
)
ggplot(risk_scores, aes(x = score, color = group)) +
geom_density() +
theme_bw() +
xlab("Default probability") +
ylab("") +
scale_color_manual(values = c("A" = "blue", "B" = "red")) +
guides(fill = guide_legend(title = NULL), color = guide_legend(title = NULL))
library(tidyverse)
# Set seed for reproducibility
set.seed(123)
# Simulate right-skewed group using Beta distribution
n <- 100000  # Number of samples in each group
alpha_a <- 2
beta_a <- 5
group_a <- rbeta(n, alpha_a, beta_a)
# Simulate left-skewed group using Beta distribution
alpha_b <- 5
beta_b <- 2
group_b <- rbeta(n, alpha_b, beta_b)
# Combine the two groups into a data frame
risk_scores <- data.frame(
score = c(group_a, group_b),
group = rep(c("A", "B"), each = n)
)
ggplot(risk_scores, aes(x = score, color = group)) +
geom_density() +
theme_bw() +
xlab("Default probability") +
ylab("") +
scale_color_manual(values = c("A" = "blue", "B" = "red")) +
guides(fill = guide_legend(title = NULL), color = guide_legend(title = NULL))
library(tidyverse)
# Set seed for reproducibility
set.seed(123)
# Simulate right-skewed group using Beta distribution
n <- 1000000  # Number of samples in each group
alpha_a <- 2
beta_a <- 5
group_a <- rbeta(n, alpha_a, beta_a)
# Simulate left-skewed group using Beta distribution
alpha_b <- 5
beta_b <- 2
group_b <- rbeta(n, alpha_b, beta_b)
# Combine the two groups into a data frame
risk_scores <- data.frame(
score = c(group_a, group_b),
group = rep(c("A", "B"), each = n)
)
ggplot(risk_scores, aes(x = score, color = group)) +
geom_density() +
theme_bw() +
xlab("Default probability") +
ylab("") +
scale_color_manual(values = c("A" = "blue", "B" = "red")) +
guides(fill = guide_legend(title = NULL), color = guide_legend(title = NULL))
library(tidyverse)
# Set seed for reproducibility
set.seed(123)
# Simulate right-skewed group using Beta distribution
n <- 1000  # Number of samples in each group
alpha_a <- 2
beta_a <- 5
group_a <- rbeta(n, alpha_a, beta_a)
# Simulate left-skewed group using Beta distribution
alpha_b <- 5
beta_b <- 2
group_b <- rbeta(n, alpha_b, beta_b)
# Combine the two groups into a data frame
risk_scores <- data.frame(
score = c(group_a, group_b),
group = rep(c("A", "B"), each = n)
)
ggplot(risk_scores, aes(x = score, color = group)) +
geom_density() +
theme_bw() +
xlab("Default probability") +
ylab("") +
scale_color_manual(values = c("A" = "blue", "B" = "red")) +
guides(fill = guide_legend(title = NULL), color = guide_legend(title = NULL))
ggplot(risk_scores, aes(x = score, color = group)) +
geom_density(bw = 0.05) +
theme_bw() +
xlab("Default probability") +
ylab("") +
scale_color_manual(values = c("A" = "blue", "B" = "red")) +
guides(fill = guide_legend(title = NULL), color = guide_legend(title = NULL))
ggplot(risk_scores, aes(x = score, color = group)) +
geom_density(bw = 0.1) +
theme_bw() +
xlab("Default probability") +
ylab("") +
scale_color_manual(values = c("A" = "blue", "B" = "red")) +
guides(fill = guide_legend(title = NULL), color = guide_legend(title = NULL))
library(tidyverse)
# Set seed for reproducibility
set.seed(123)
# Simulate right-skewed group using Beta distribution
n <- 1000  # Number of samples in each group
alpha_a <- 2
beta_a <- 5
group_a <- rbeta(n, alpha_a, beta_a)
# Simulate left-skewed group using Beta distribution
alpha_b <- 4
beta_b <- 2
group_b <- rbeta(n, alpha_b, beta_b)
# Combine the two groups into a data frame
risk_scores <- data.frame(
score = c(group_a, group_b),
group = rep(c("A", "B"), each = n)
)
ggplot(risk_scores, aes(x = score, color = group)) +
geom_density(bw = 0.1) +
theme_bw() +
xlab("Default probability") +
ylab("") +
scale_color_manual(values = c("A" = "blue", "B" = "red")) +
guides(fill = guide_legend(title = NULL), color = guide_legend(title = NULL))
library(tidyverse)
# Set seed for reproducibility
set.seed(123)
# Simulate right-skewed group using Beta distribution
n <- 1000  # Number of samples in each group
alpha_a <- 2
beta_a <- 5
group_a <- rbeta(n, alpha_a, beta_a)
# Simulate left-skewed group using Beta distribution
alpha_b <- 2
beta_b <- 2
group_b <- rbeta(n, alpha_b, beta_b)
# Combine the two groups into a data frame
risk_scores <- data.frame(
score = c(group_a, group_b),
group = rep(c("A", "B"), each = n)
)
ggplot(risk_scores, aes(x = score, color = group)) +
geom_density(bw = 0.1) +
theme_bw() +
xlab("Default probability") +
ylab("") +
scale_color_manual(values = c("A" = "blue", "B" = "red")) +
guides(fill = guide_legend(title = NULL), color = guide_legend(title = NULL))
